/**
 * First Apollo Server setting
 * Steps involved are:
 * 1. Install dependencies: apollo-server and graphql and Import ApolloServer class and gql tag
 * 2. Define a garphQl Schema 
 * 3. Define a data Set
 * 4. Define a resolver
 * 5. Create an instance of apollo server
 * 6. Start the server 
 */

import { ApolloServer, gql } from 'apollo-server';

/**
 * gql: The gql template literal tag 
 * It can be used to concisely write a GraphQL query that is parsed into a standard GraphQL AST.
 * AST: abstract syntax tree
 * 
 * typeDefs: Document or documents that represent your server's GraphQL schema,
 * generated by applying the gql tag to valid Schema Definition Language (SDL) strings
 */
const typeDefs=gql`
type Book{
    title: String,
    author:String
}

# The "Query" type is special: it lists all of the available queries that
# clients can execute, along with the return type for each. In this
# case, the "books" query returns an array of zero or more Books (defined above).

type Query{
    books:[Book]
}
`

const books = [
    {
      title: 'The Awakening',
      author: 'Kate Chopin',
    },
    {
      title: 'City of Glass',
      author: 'Paul Auster',
    },
    {
        title: 'Alchemist',
        author: 'Paulo Coelho ',
  },
  {
    title: "Five Point SomeOne",
    author: "Chetan Bhagat"
    }
  ];
  
/**Resolvers tell Apollo Server how to fetch the data associated with a particular type.
 * Resolvers define the technique for fetching the types defined in the  schema.
 *  This resolver retrieves books from the "books" array above.
 */

const resolvers = {
  Query: {
    books: () => books
  }
}

// The ApolloServer constructor requires two parameters: your schema
// definition and your set of resolvers.
const server = new ApolloServer({ typeDefs, resolvers });
server.listen(5000).then(({url}) => {
  console.log(`Server ready at ${url}`);
})